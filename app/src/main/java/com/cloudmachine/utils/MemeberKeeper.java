package com.cloudmachine.utils;import android.content.Context;import android.content.SharedPreferences;import android.content.SharedPreferences.Editor;import android.util.Base64;import com.cloudmachine.MyApplication;import com.cloudmachine.bean.Member;import com.cloudmachine.bean.ResidentAddressInfo;import com.cloudmachine.helper.DataSupportManager;import com.cloudmachine.helper.DeviceHelper;import com.cloudmachine.helper.UserHelper;import org.litepal.crud.DataSupport;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.IOException;import java.io.ObjectInputStream;import java.io.ObjectOutputStream;import java.io.StreamCorruptedException;import java.util.HashMap;import java.util.List;import java.util.Map;public class MemeberKeeper {    private static String memberKey = "cloudm_member";    public static void saveOAuth(Member member, Context context) {        if (null == member)            return;        UserHelper.saveInfo(context, member.getMobile(), member.getLogo());        MyApplication.getInstance().setTempMember(member);        SharedPreferences preferences = context.getSharedPreferences(                memberKey, Context.MODE_PRIVATE);        // 创建字节输出流        ByteArrayOutputStream baos = new ByteArrayOutputStream();        try {            // 创建对象输出流，并封装字节流            ObjectOutputStream oos = new ObjectOutputStream(baos);            // 将对象写入字节流            oos.writeObject(member);            // 将字节流编码成base64的字符窜            String oAuth_Base64 = new String(Base64.encode(baos                    .toByteArray(), Base64.DEFAULT));            Editor editor = preferences.edit();            editor.putString(memberKey, oAuth_Base64);            editor.apply();        } catch (IOException e) {            e.printStackTrace();        }    }    // PortalLoginDOKeeper.clearOauth(this);    public static void clearOauth(Context context) {        UserHelper.saveUserToken(context,null,null);        SharedPreferences preferences = context.getSharedPreferences(                memberKey, Context.MODE_PRIVATE);        Editor editor = preferences.edit();        editor.clear();        editor.apply();        MyApplication.getInstance().setTempMember(null);        DeviceHelper.clearRepairInfo(context);        List<ResidentAddressInfo> infoList = DataSupportManager.findAll(ResidentAddressInfo.class);        if (infoList != null && infoList.size() > 0) {            DataSupport.deleteAll(ResidentAddressInfo.class);        }    }    public static synchronized Member getOauth(Context context) {        Member member = MyApplication.getInstance().getTempMember();        if (null == member) {            try {                SharedPreferences preferences = context.getSharedPreferences(                        memberKey, Context.MODE_PRIVATE);                String productBase64 = preferences.getString(memberKey, "");                // 读取字节                byte[] base64 = Base64.decode(productBase64.getBytes(), Base64.DEFAULT);                // 封装到字节流                ByteArrayInputStream bais = new ByteArrayInputStream(base64);                // 再次封装                ObjectInputStream bis = new ObjectInputStream(bais);                try {                    // 读取对象                    member = (Member) bis.readObject();                    MyApplication.getInstance().setTempMember(member);                } catch (ClassNotFoundException e) {                    e.printStackTrace();                }            } catch (StreamCorruptedException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            } catch (Exception e) {                return null;            }        }        return member;    }}