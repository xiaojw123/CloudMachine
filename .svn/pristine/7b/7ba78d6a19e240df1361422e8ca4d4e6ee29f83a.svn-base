package com.cloudmachine.activities;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.TextView;

import com.amap.api.maps2d.AMap;
import com.amap.api.maps2d.AMap.InfoWindowAdapter;
import com.amap.api.maps2d.CameraUpdateFactory;
import com.amap.api.maps2d.MapView;
import com.amap.api.maps2d.model.BitmapDescriptorFactory;
import com.amap.api.maps2d.model.CameraPosition;
import com.amap.api.maps2d.model.LatLng;
import com.amap.api.maps2d.model.Marker;
import com.amap.api.maps2d.model.MarkerOptions;
import com.cloudmachine.R;
import com.cloudmachine.autolayout.widgets.RadiusButtonView;
import com.cloudmachine.autolayout.widgets.TitleView;
import com.cloudmachine.struc.McDeviceBasicsInfo;
import com.cloudmachine.struc.McDeviceLocation;
import com.cloudmachine.utils.Constants;

/**
 * 
 * @author shixionglu
 * 展示我的机器在地图上的位置
 */
public class MapViewActivity extends BaseAutoLayoutActivity implements InfoWindowAdapter{
	private static final int zoomDefault = 14;
	private Context mContext;
	private MapView mapView;
	private AMap aMap;
	private TitleView title_layout;  
	private McDeviceBasicsInfo mcDeviceBasicsInfo; 
	private McDeviceLocation location;
	private MarkerOptions markerOption;
	private LatLng myLatLng;
	private Marker myMarker;
	private RadiusButtonView electronic_button,historical_button;
	private long deviceId;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_mapview);
		this.mContext = this;
		if(null == mapView){
			mapView = (MapView) findViewById(R.id.map);
			mapView.onCreate(savedInstanceState);
		}
		getIntentData();
		initView();
	}
	private void getIntentData() {
		Intent intent = this.getIntent();
		Bundle bundle = intent.getExtras();
		if (bundle != null) {
			try {
				mcDeviceBasicsInfo = (McDeviceBasicsInfo) bundle
						.getSerializable(Constants.P_MCDEVICEBASICSINFO);
				deviceId = bundle.getLong("deviceId");
			} catch (Exception e) {
				Constants.MyLog(e.getMessage());
			}

		}
	}
	private void initView(){
		initTitleLayout();
		initMap();
		electronic_button = (RadiusButtonView)findViewById(R.id.electronic_button);
		electronic_button.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Bundle bundle = new Bundle();
				bundle.putSerializable(Constants.P_MCDEVICEBASICSINFO,
						mcDeviceBasicsInfo);
				bundle.putLong("deviceId", deviceId);
				Constants.toActivity(MapViewActivity.this, MapOneActivity.class, bundle);
			}
		});
		historical_button = (RadiusButtonView)findViewById(R.id.historical_button);
		historical_button.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Bundle bHistorical = new Bundle();
				bHistorical.putSerializable(Constants.P_MCDEVICEBASICSINFO,
						mcDeviceBasicsInfo);
				Constants.toActivity(MapViewActivity.this, HistoricalTrackActivity.class,
						bHistorical);
			}
		});
	}
	private void initMap(){
		if (aMap == null) {
			aMap = mapView.getMap();
			setUpMap();
		}
	}
	
	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
		
	}
	
private void initTitleLayout(){
		
		title_layout = (TitleView)findViewById(R.id.title_layout);
//		if(null != mcDeviceBasicsInfo && !TextUtils.isEmpty(mcDeviceBasicsInfo.getDeviceName())){
//			title_layout.setTitle(mcDeviceBasicsInfo.getDeviceName());
//		}
		title_layout.setTitle("当前位置");
		title_layout.setLeftOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				 finish(); 
			}
		});
	}

private void setUpMap() {
	aMap.setInfoWindowAdapter(this);// 设置自定义InfoWindow样式
	addMarkerToMap();// 往地图上添加marker
}
	
private void addMarkerToMap(){
	
	if(null!=mcDeviceBasicsInfo){
			location = mcDeviceBasicsInfo.getLocation();
			
			markerOption = new MarkerOptions();
			String allTiel = "";
			if(location != null){
				myLatLng = new LatLng(location.getLat(),location.getLng());
				markerOption.position(myLatLng);
				allTiel = mcDeviceBasicsInfo.getDeviceName()+Constants.S_FG+location.getPosition()+Constants.S_FG+mcDeviceBasicsInfo.getId();
			}else{
				allTiel = mcDeviceBasicsInfo.getDeviceName()+Constants.S_FG+Constants.S_DEVICE_LOCATION_NO+Constants.S_FG+mcDeviceBasicsInfo.getId();
			}
			markerOption.title(allTiel);
			if(mcDeviceBasicsInfo.getWorkStatus() == 0){
				markerOption.icon(BitmapDescriptorFactory
						.fromResource(R.drawable.mc_workstatus_0));
			}else{
				markerOption.icon(BitmapDescriptorFactory
						.fromResource(R.drawable.mc_workstatus_1));
			}
			
			myMarker = aMap.addMarker(markerOption);
			myMarker.showInfoWindow();
			if(null != myMarker.getPosition())
				aMap.moveCamera(CameraUpdateFactory.newCameraPosition(new CameraPosition(
						myMarker.getPosition(), zoomDefault, 0, 30)));//18
	}
	
}
@Override
public View getInfoContents(Marker marker) {
	// TODO Auto-generated method stub
	View infoWindow = this.getLayoutInflater().inflate(
			R.layout.custom_info_contents, null);

	render(marker, infoWindow);
	return infoWindow;
}
@Override
public View getInfoWindow(Marker marker) {
	// TODO Auto-generated method stub
	View infoWindow = this.getLayoutInflater().inflate(
			R.layout.custom_info_window, null);

	render(marker, infoWindow);
	return infoWindow;
}
/**
 * 自定义infowinfow窗口
 */
public void render(Marker marker, View view) {
	ImageView arrow_r_image = (ImageView) view.findViewById(R.id.arrow_r_image);
	arrow_r_image.setVisibility(View.GONE);
	String allStr[] = marker.getTitle().split(Constants.S_FG);
	TextView titleUi = ((TextView) view.findViewById(R.id.title));
	titleUi.setText(allStr.length > 1 ? allStr[0] : "");
	TextView snippetUi = ((TextView) view.findViewById(R.id.snippet));
	snippetUi.setText(allStr.length > 2 ? allStr[1] : "");
}
}
